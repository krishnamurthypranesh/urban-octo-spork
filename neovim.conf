" This is a vimrc file that I'm building from scratch. I'm doing this because of two reasons:
" 	1. My vim installation is not customized to my needs anymore. It's become cluttered with a plugins and settings that I don't need. Because of this, my productivity has taken a hit.
" 	2. I've just completed my task. Before I start my next task, I want to take sometime off and build a vim installation that suits my needs.
"  With this new vim rc, I intend to do a couple of things:
"  	1. Build my vim installation from the ground up to suit my needs.


" Stop vim from trying to act like vi
set nocompatible

" Enable syntax highlighting
syntax enable

" Enable plugins for files of specific types
" This option adds the filetype.vim to the `runtimepath`
" This particular setting enables both autoloading of plugins
" and autoindentation based on the detected filetype
filetype plugin indent on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""PERSONALIZATIONS"""""""""""""""""""""""""""""""" 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Actual vimscript programming stuff

" fuzzy file finder
set path=.,/usr/include,,,**

" enables a menu to be shown whenever there are too many matches
" hit <tab> to open the menu
set wildmenu

" enable backspace to act as delete key during insert mode
" enable backspace to act as left key during normal mode
set backspace=indent,eol,start

" set split positions
set splitbelow
set splitright

" Set line numbers
set number
set relativenumber

" set the status line to show status permanently
set laststatus=2

set scrolloff=3 " keep three lines between the cursor and the edge of the screen
"set mouse=a

"split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" tabs are another way of browsing multiple files
" the following are for tab navigations
map <C-t><up> :tabl<cr>
map <C-t><down> :tabr<cr>
map <C-t><left> :tabp<cr>
map <C-t><right> :tabn<cr>

" Terminal Window Management
"" Like vim, neovim provides a way to emulate a terminal inside it
"" This can be useful for rapid prototyping of programs
"" The following are commands to help use this feature easily

" To map <Esc> to exit terminal-mode:
:tnoremap <Esc> <C-\><C-n>

" To use `ALT+{h,j,k,l}` to navigate windows from any mode:
:tnoremap <A-h> <C-\><C-N><C-w>h
:tnoremap <A-j> <C-\><C-N><C-w>j
:tnoremap <A-k> <C-\><C-N><C-w>k
:tnoremap <A-l> <C-\><C-N><C-w>l
:inoremap <A-h> <C-\><C-N><C-w>h
:inoremap <A-j> <C-\><C-N><C-w>j
:inoremap <A-k> <C-\><C-N><C-w>k
:inoremap <A-l> <C-\><C-N><C-w>l
:nnoremap <A-h> <C-w>h
:nnoremap <A-j> <C-w>j
:nnoremap <A-k> <C-w>k
:nnoremap <A-l> <C-w>l

" Code Folding
" Enable folding
set foldmethod=indent
set foldlevel=99

" Enable folding with spacebar
nnoremap <space> za

" Enabling PEP8 Standards
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

au BufNewFile,BufRead *.html
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=100 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

au BufNewFile,BufRead *.js
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

au BufNewFile,BufRead *.md
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=200 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

" yaml formatting
au BufNewFile,BufRead *.yml,*.yaml
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

" Flagging unnecessary whitespace
" define BadWhitespace before using in a match
highlight BadWhitespace ctermbg=blue guibg=darkred
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h,*.js,*.ts,*.html,*.vim,*.yml,*.sh match BadWhitespace /\s\+$/

" Vundle plugins for making vim interesting

set runtimepath+=~/.config/nvim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'kien/ctrlp.vim'
Plugin 'tpope/vim-fugitive'
Plugin 'dense-analysis/ale'
Plugin 'neoclide/coc.nvim', {'branch': 'release'}

""""""""""""""""""
" COLOR SCHEMES
""""""""""""""""""
Plugin 'challenger-deep-theme/vim'

call vundle#end()

"""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""PACKAGE SPECIFIC SETTINGS""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""

" remapping shortcut for NERDTree
map <C-o> :NERDTreeToggle<CR>

" disable linting on enter since it causes vim to slowdown
let g:ale_lint_on_enter=0

" specify linters to use for languages
" current requirements are: Python, JavaScript, HTML and normal scripts
let g:ale_linters={'python':['pylint'], 'javascript': ['eslint']}

" specify fixers to user for languages
" current requirements are: Pyhton, Javascript, HTML and normal scripts
let g:ale_fixers={'python':['autopep8']}

" custom symbols for warnings and errors
let g:ale_sign_error='E!'
let g:ale_sign_warning='W>'

" custom colors for highlighting errors and warnings
highlight ALEError ctermbg=DarkRed
highlight ALEWarning ctermbg=DarkBlue

" custom format for error message
let g:ale_echo_msg_format='[%linter%] %code% %s  [%severity%]'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'

" loclist settings for ale
"" open the loclist when there are errors
let g:ale_open_list=0

let g:ale_lint_on_save=1

let g:ale_sign_column_always=1

""""""COC OPTIONS"""""""
""""""""""""""""""""""""
" coc config
let g:coc_global_extensions = [
  \ 'coc-snippets',
  \ 'coc-pairs',
  \ 'coc-tsserver',
  \ 'coc-eslint',
  \ 'coc-prettier',
  \ 'coc-json',
  \ 'coc-python'
  \ ]

"""""COLORSCHEME SETTINGS"""""
"""""IN USE: Challenger Deep""
"colorscheme challenger_deep


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" USER DEFINED FUNCTIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Enable spell check
hi clear SpellBad
hi SpellBad cterm=underline ctermfg=red guifg=red
set spell

" Enable spelling correction without moving cursor
function! FixLastSpellingError()
	normal! mm[s1z=`m
	endfunction
nnoremap <leader>sp :call FixLastSpellingError()<cr>

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
